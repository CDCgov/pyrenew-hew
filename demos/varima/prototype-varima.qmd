---
title: "Prototype VARIMA"
format: html
---

```{r}
library(pak)
pak::local_install("hewr", ask = FALSE) #For deps
pak::pkg_install("epidatr", ask = FALSE)

library(fable)
library(fabletools)
library(tsibble)
library(epidatr)
library(dplyr)
library(purrr)
library(lubridate)
library(forecasttools)
library(tidyr)
library(ggplot2)
```

## Prototyping and Experiments

- Latest
- Week before last major peak. 23-12-31 for covid 23-12-24 for flu
- Around last upturn. 2024-10-13 for flu 24-6-16 for covid before summer 24-11-03 before winter.

## Load data

```{r}
signals <- c("pct_ed_visits_covid","pct_ed_visits_influenza", "pct_ed_visits_rsv")
nhsn_cols <- c("totalconfflunewadm", "totalconfc19newadm")

latest_us_nhsn <- pull_nhsn(
            columns = nhsn_cols,
        )

latest_us_nssp <- pub_covidcast(
  source = "nssp",
  signals = signals,
  geo_type = "nation",
  time_type = "week",
  as_of = NULL,
)
```

```{r}
offset <- 1e-3
nssp <- latest_us_nssp |>
        select(geo_value, signal, time_value, value)

nhsn <- latest_us_nhsn |>
        mutate(time_value = lubridate::as_date(weekendingdate) + 1) |>
        mutate(nhsn_influenza = as.numeric(totalconfflunewadm),
            nhsn_covid = as.numeric(totalconfc19newadm)) |>
        pivot_longer(all_of(c("nhsn_influenza", "nhsn_covid")),
            names_to = "signal") |>
        group_by(time_value, signal) |>
        summarise(value = sum(value, na.rm = TRUE)) |>
        mutate(geo_value = "us") |>
        filter(time_value %in% nssp$time_value)

us_data <- bind_rows(nssp, nhsn) |>
    pivot_wider(names_from = signal, values_from = value) |>
    mutate(across(
        .cols = all_of(c("nhsn_influenza", "nhsn_covid", signals)),
        .fns = ~ log(. + offset),
        .names = "log_{.col}"
    )) |>
    as_tsibble(index = time_value)
```

## Models

```{r}
model_configs_covid = list(
    list(name = "sarima", model = ARIMA(log_nhsn_covid)),
    list(name = "varima_same_target", model = VARIMA(vars(log_nhsn_covid, log_pct_ed_visits_covid) ~ pdq())),
    list(name = "varima_op_target", model = VARIMA(vars(log_nhsn_covid, log_pct_ed_visits_influenza) ~ pdq())),
    list(name = "varima_all", model = VARIMA(vars(log_nhsn_covid, log_nhsn_influenza, log_pct_ed_visits_covid, log_pct_ed_visits_influenza) ~ pdq(0:5,1,0:5)))
)

model_configs_influenza = list(
    list(name = "sarima", model = ARIMA(log_nhsn_influenza)),
    list(name = "varima_same_target", model = VARIMA(vars(log_nhsn_influenza, log_pct_ed_visits_influenza) ~ pdq())),
    list(name = "varima_op_target", model = VARIMA(vars(log_nhsn_influenza, log_pct_ed_visits_covid) ~ pdq())),
    list(name = "varima_all", model = VARIMA(vars(log_nhsn_covid, log_nhsn_influenza, log_pct_ed_visits_covid, log_pct_ed_visits_influenza) ~ pdq(0:5,1,0:5)))
)

forecast_horizon <- "4 weeks"
```

```{r}
generate_fits_and_scores <- function(model_configs, us_data, cutoff_data,
    target_name, target_col, fc_str = "4 weeks"){
    us_data_redacted  <- us_data |> filter(time_value < cutoff_data)

    fits <- model_configs |>
        map(function(x) {
        us_data_redacted |> model(!!x$name := x$model) } )

    forecasts <- fits |>
        map(\(x) forecast(x, h = fc_str))

    scores <- forecasts |>
        map(\(x) accuracy(x, us_data, measures = list(crps_score = CRPS))) |>
        bind_rows() |>
        mutate(.response = ifelse(is.na(.response), !!target_col, .response)) |>
        filter(.response == !!target_col) |>
        arrange(crps_score) |>
        mutate(target = !!target_name)

    return(list(fits = fits, scores = scores))
}

# generate_fits_and_scores <- function(model_configs, us_data, cutoff_data,
#     target_name, target_col, fc_str = "4 weeks"){
#     us_data_redacted  <- us_data |> filter(time_value < cutoff_data)

#     fits <- model_configs |>
#         map(function(x) {
#         us_data_redacted |> model(!!x$name := x$model) } )

#     forecasts <- fits |>
#         map(\(x) forecast(x, h = fc_str))

#     scores <- forecasts |>
#         map(\(x) accuracy(x, us_data, measures = list(crps_score = CRPS))) |>
#         bind_rows() |>
#         mutate(.response = ifelse(is.na(.response), "log_nhsn_covid", .response)) |>
#         filter(.response == "log_nhsn_covid") |>
#         arrange(crps_score) |>
#         mutate(target = "covid")

#     return(list(fits = fits, scores = scores))
# }
```

```{r}
summary_forecasts <- D$fits |>
    map(
        function(x){
            x |>
            generate(times = 2000, h = forecast_horizon) |>
            as_tibble() |>
            rename_with(\(z) "log_nhsn_covid", any_of(c(".sim", "log_nhsn_covid"))) |>
            select(.model, time_value, log_nhsn_covid, .rep) |>
            group_by(time_value, .model) |>
            summarise(
                median_forecast = median(log_nhsn_covid),
                lower_ci = quantile(log_nhsn_covid, probs = 0.025),
                upper_ci = quantile(log_nhsn_covid, probs = 0.975)
            )
        }
    ) |>
    bind_rows()

summarize_forecasts <- function(fits, target_col, forecast_horizon,
    times = 2000){
        summary_forecasts <- fits |>
            map(
                function(x){
                    x |>
                    generate(times = 2000, h = forecast_horizon) |>
                    as_tibble() |>
                    rename_with(\(z) !!target_col, any_of(c(".sim", !!target_col))) |>
                    select(.model, time_value, !!target_col, .rep) |>
                    group_by(time_value, .model) |>
                    summarise(
                        median_forecast = median(!!target_col),
                        lower_ci = quantile(!!target_col, probs = 0.025),
                        upper_ci = quantile(!!target_col, probs = 0.975)
                    )
                }
            ) |>
    bind_rows()
    return(summary_forecasts)
}
```
## Covid-19

### Last peak
Define relevant dates
```{r}
wk_bf_mj_peak <- as.Date("2023-12-31")

D <- generate_fits_and_scores(model_configs_covid, us_data, wk_bf_mj_peak,
    fc_str = forecast_horizon)
D$scores
```

```{r}
summary_forecasts <- D$fits |>
    map(
        function(x){
            x |>
            generate(times = 2000, h = forecast_horizon) |>
            as_tibble() |>
            rename_with(\(z) "log_nhsn_covid", any_of(c(".sim", "log_nhsn_covid"))) |>
            select(.model, time_value, log_nhsn_covid, .rep) |>
            group_by(time_value, .model) |>
            summarise(
                median_forecast = median(log_nhsn_covid),
                lower_ci = quantile(log_nhsn_covid, probs = 0.025),
                upper_ci = quantile(log_nhsn_covid, probs = 0.975)
            )
        }
    ) |>
    bind_rows()

    ggplot() +
        geom_line(data = us_data, aes(x = time_value, y = log_nhsn_covid)) +
        geom_ribbon(data = summary_forecasts, aes(x = time_value, ymin = lower_ci, ymax = upper_ci, fill = .model), alpha = 0.2) +
        geom_line(data = summary_forecasts, aes(x = time_value, y = median_forecast, color = .model)) +
        labs(title = "Log of NHSN COVID Data Over Time: Forecasting with Uncertainty",
            x = "Date",
            y = "Log(NHSN COVID)") +
        theme(legend.position = "bottom") +
        facet_wrap(~ .model, scales = "free_y")
```

### Summer upturn

```{r}
wk_bf_summer_uptick <- as.Date("2024-06-16")
us_data_bf_summer_uptick <- us_data |> filter(time_value < wk_bf_summer_uptick)

fits_bf_summer_uptick <- model_configs_covid |>
    map(function(x) {
    us_data_bf_summer_uptick |> model(!!x$name := x$model) } )

forecasts_bf_summer_uptick <- fits_bf_summer_uptick |> forecast(h = fc_str)

accuracy_results <- forecasts_bf_summer_uptick |>
    map(\(x) accuracy(x, us_data, measures = list(crps_score = CRPS))) |>
    bind_rows() |>
    mutate(.response = ifelse(is.na(.response), "log_nhsn_covid", .response)) |>
    filter(.response == "log_nhsn_covid") |>
    arrange(crps_score) |>
    mutate(target = "covid")

accuracy_results
```
