---
title: "PyRenew-HEW Model Diagnostics"
format:
  dashboard:
    theme:
    - flatly
    - custom.scss
    embed-resources: false
params:
  model_dir_raw: "/home/xum8/pyrenew-hew/private_data/pyrenew-test-output/covid-19_r_2024-11-22_f_2024-08-19_t_2024-11-16/model_runs/SC" # pragma: allowlist-secret
---
<!-- Would like embed-resources to be true, but the current version is problematic with blobfuse -->

```{r Parse Params}
library(arrow)
library(cowplot)
library(dplyr)
library(DT)
library(fs)
library(ggplot2)
library(hewr)
library(htmltools)
library(knitr)
library(latex2exp)
library(purrr)
library(reticulate)
library(stringr)
library(tibble)
library(tidybayes)
library(tidyr)

model_dir <- path(params$model_dir_raw)
model_info <- parse_model_run_dir_path(model_dir)

available_states <- model_dir %>%
  path_dir() %>%
  dir_ls(type = "directory") %>%
  path_file()
```

## {.sidebar}

```{r Render Sidebar}
#| output: asis
formatted_available_states <-
  available_states %>%
  map(\(x) a(x, href = path(x, ext = "html"))) %>%
  map(p) %>%
  map_chr(as.character) %>%
  str_c(collapse = "")

cat(formatted_available_states)
```

# Run Info


```{r Model Metadata}
#| title: Model Info
model_info |>
  enframe() |>
  mutate(value = map_chr(value, as.character)) |>
  kable()
```

# Forecasts {scrolling="true"}
```{r Example Forecast}
theme_set(cowplot::theme_cowplot())
forecast_ci <- read_parquet(
  path(model_dir, "forecast_ci", ext = "parquet")
)
combined_dat <- read_parquet(
  path(model_dir, "combined_training_eval_data", ext = "parquet")
)

figure_save_tbl <-
  expand_grid(
    target_disease = unique(combined_dat$disease),
    y_transform = c("identity", "log10")
  ) |>
  mutate(figure = map2(
    target_disease, y_transform,
    \(target_disease, y_transform) {
      make_forecast_figure(
        target_disease = target_disease,
        combined_dat = combined_dat,
        forecast_ci = forecast_ci,
        disease_name = model_info$disease,
        data_vintage_date = model_info$report_date,
        y_transform = y_transform
      )
    }
  ))
```

## Row {.tabset}

```{r Prop Natural Scale}
#| title: Natural Scale
figure_save_tbl |>
  filter(
    target_disease == "prop_disease_ed_visits",
    y_transform == "identity"
  ) |>
  pull(figure) |>
  pluck(1)
```

```{r Prop Log Scale}
#| title: Log Scale
figure_save_tbl |>
  filter(
    target_disease == "prop_disease_ed_visits",
    y_transform == "log10"
  ) |>
  pull(figure) |>
  pluck(1)
```

## Row {.tabset}

```{r Disease Natural Scale}
#| title: Natural Scale
figure_save_tbl |>
  filter(
    target_disease == "Disease",
    y_transform == "identity"
  ) |>
  pull(figure) |>
  pluck(1)
```

```{r Disease Log Scale}
#| title: Log Scale
figure_save_tbl |>
  filter(
    target_disease == "Disease",
    y_transform == "log10"
  ) |>
  pull(figure) |>
  pluck(1)
```

## Row {.tabset}

```{r Other Natural Scale}
#| title: Natural Scale
figure_save_tbl |>
  filter(
    target_disease == "Other",
    y_transform == "identity"
  ) |>
  pull(figure) |>
  pluck(1)
```

```{r Other Log Scale}
#| title: Log Scale
figure_save_tbl |>
  filter(
    target_disease == "Other",
    y_transform == "log10"
  ) |>
  pull(figure) |>
  pluck(1)
```

# Parameters

```{r Rt Plot}
#| title: Posterior Rt
date_time_map <- combined_dat |>
  filter(data_type == "train") |>
  distinct(time, date)

pyrenew_posterior <- read_parquet(
  path(model_dir, "mcmc_tidy", "pyrenew_posterior", ext = "parquet")
) |>
  tidy_draws()

rt_ci <- pyrenew_posterior |>
  gather_draws(rt[time]) |>
  median_qi(.width = c(0.5, 0.8, 0.95)) |>
  mutate(time = time + 1) |>
  left_join(date_time_map, by = "time")


ggplot(rt_ci, aes(date, .value, ymin = .lower, ymax = .upper)) +
  geom_lineribbon(
    color = "#08519c",
    key_glyph = ggplot2::draw_key_rect,
    step = "mid"
  ) +
  ggplot2::scale_fill_brewer(
    name = "Credible Interval Width",
    labels = ~ scales::label_percent()(as.numeric(.))
  ) +
  scale_y_log10(TeX("$R_t$")) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  cowplot::theme_minimal_grid() +
  ggtitle(TeX("Posterior $R_t$")) +
  theme(legend.position = "bottom")
```


# MCMC Diagnostics

```{python Load InferenceData}
from pathlib import Path
import polars as pl
from itables import to_html_datatable
import arviz as az

model_dir = Path(r.params["model_dir_raw"])
idata = az.from_netcdf(Path(model_dir, "inference_data.nc"))
idata_summary = az.summary(idata)
```

```{r Render InferenceData}
#| title: MCMC Summary
datatable(py$idata_summary)
```
