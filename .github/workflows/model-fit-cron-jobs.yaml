name: Submit model fit jobs to Azure Batch via cron

on:
  workflow_dispatch:
  schedule:
    - cron: "0,30 9-20 * * WED"  # Every Wednesday, every 30 minutes from 9 AM to 8 PM UTC
  push:
    branches:
      - 'jk*' # For testing purposes; matches any branch starting with 'jk'
    paths:
      - '.github/workflows/model-fit-cron-jobs.yaml'

jobs:

  set-model-run-environment:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT_NAME: ${{ steps.set-env-step.outputs.ENVIRONMENT_NAME }}
      BRANCH_NAME: ${{ steps.get-branch-name.outputs.BRANCH_NAME }}
    steps:

      # Output these variables to both $GITHUB_OUTPUT (available to everything) and
      # $GITHUB_ENV (easier syntax when available)
      - id: set-env-step
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT_NAME=test" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT_NAME=test" >> $GITHUB_ENV
          fi
      - id: get-branch-name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV

  # TODO: Split into separate jobs for each model, and one for the oidc token

  generate-oidc-token:
    runs-on: ubuntu-latest
    outputs:
      oidc_token: ${{ steps.set-oidc-token.outputs.oidc_token }}

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - run: npm install @actions/core@1.6.0 @actions/http-client
      - uses: actions/github-script@v7
        id: set-oidc-token
        with:
          script: |
            const coredemo = require('@actions/core')
            const oidc_token = await coredemo.getIDToken('api://AzureADTokenExchange')
            coredemo.setOutput('oidc_token', oidc_token)

  check-available-data:
    runs-on: ubuntu-latest
    needs:
      - set-model-run-environment
      - generate-oidc-token
    environment: ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      id-token: write

    # Future job runs are conditioned on a combinatory logic of the following boolean outputs.
    # We define ahead-of-time what outputs will be set, then actually output within the check-dataset-availability step.
    outputs:
          # necessary for timeseries-e
          nssp_latest_comprehensive_check: ${{ steps.check-dataset-availability.outputs.nssp_latest_comprehensive_check }}
          # necessary for pyrenew-e
          timseries_e_check: ${{ steps.check-dataset-availability.outputs.timseries_e_check }}
          # necessary for h models
          nhsn_check: ${{ steps.check-dataset-availability.outputs.nhsn_check }}
          # necessary for w models
          nwss_gold_check: ${{ steps.check-dataset-availability.outputs.nwss_gold_check }}

    steps:
      - name: Check for Dataset Availability
        id: check-dataset-availability
        # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
        uses: CDCgov/cfa-actions/runner-action@v1.4.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            echo "------------------------------------------------------------"
            echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"
            echo "------------------------------------------------------------"
            az login --service-principal \
                     --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                     --tenant ${{ secrets.AZURE_TENANT_ID }} \
                     --federated-token ${{ needs.generate-oidc-token.outputs.oidc_token }} \
                     --output none

            # nssp
            nssp_latest_comprehensive_last_modified=$(
              az storage blob show \
              --account-name "cfaazurebatchprd" \
              --container-name "nssp-etl" \
              --name "latest_comprehensive.parquet" \
              --query "properties.lastModified" \
              --auth-mode login \
              --output tsv
            )

            # convert to a simple date
            raw_nssp_latest_comprehensive_date=$(echo $nssp_latest_comprehensive_last_modified | cut -d 'T' -f 1)

            # NSSP in utc time
            nssp_latest_comprehensive_date=$(date -u -d "$raw_nssp_latest_comprehensive_date" +%Y-%m-%d)
            current_date=$(date -u +%Y-%m-%d)

            echo "-----------------------------------------"
            echo "Latest comprehensive last modified date:"
            echo $nssp_latest_comprehensive_date
            echo "-----------------------------------------"

            # TODO: logic to compare nssp_latest_comprehensive_date with current date
            # TODO: create boolean output variable for the check that we can check in later job
            # We modify both to fit utc timezone

            if [[ "$utc_nssp_latest_comprehensive_date" < "$current_date" ]]; then
              echo "nssp_latest_comprehensive_check=true" >> $GITHUB_OUTPUT
            else
              echo "nssp_latest_comprehensive_check=false" >> $GITHUB_OUTPUT
            fi

            # timeseries-e
            # TODO: check test output too, if the flag is set
            # timseries_e_output=$(
            #   az storage blob show \
            #   --account-name "cfaazurebatchprd" \
            #   --container-name "pyrenew-hew-prod-output" \
            #   --name "" \
            #   --query "properties.lastModified" \
            #   --auth-mode login \
            #   --output tsv
            # )

            # TODO: create boolean output variable for the check that we can check in later job
            if [[ "$timseries_e_output" < "$current_date" ]]; then
              echo "timseries_e_check=true" >> $GITHUB_OUTPUT
            else
              echo "timseries_e_check=false" >> $GITHUB_OUTPUT
            fi

            # nwss
            # nwss_gold_last_modified=$(
            #   az storage blob show \
            #   --account-name "cfaazurebatchprd" \
            #   --container-name "nssp-etl" \
            #   --name "latest_comprehensive.parquet" \
            #   --query "properties.lastModified" \
            #   --auth-mode login \
            #   --output tsv
            # )

            # TODO: create boolean output variable for the check that we can check in later job
            if [[ "$nwss_gold_last_modified" < "$current_date" ]]; then
              echo "nwss_gold_check=true" >> $GITHUB_OUTPUT
            else
              echo "nwss_gold_check=false" >> $GITHUB_OUTPUT
            fi

            # nhsn
            # TODO: nshn api code

  run-timeseries-e:
    needs:
      - set-model-run-environment
      - generate-oidc-token
      - check-available-data

    # TODO: configure this check
    # if: ${{ needs.check-available-data.outputs.nssp_latest_comprehensive_check == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Announce deployment environment
        run: |
          echo "Deploying to ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}"
          echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"

      - name: Submit timeseries-e Job
        id: submit-timeseries-e
        # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
        uses: CDCgov/cfa-actions/runner-action@v1.4.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            echo "------------------------------------------------------------"
            echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"
            echo "------------------------------------------------------------"
            az login --service-principal \
                     --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                     --tenant ${{ secrets.AZURE_TENANT_ID }} \
                     --federated-token ${{ needs.generate-oidc-token.outputs.oidc_token }} \
                     --output none

            CURRENT_BRANCH="${{ needs.set-model-run-environment.outputs.BRANCH_NAME }}"
            echo "--------------------------------------------------------------"
            echo "Cloning repo at branch '$CURRENT_BRANCH', and switching to it."
            echo "--------------------------------------------------------------"
            git clone -b "$CURRENT_BRANCH" https://github.com/${{ github.repository }}.git
            cd pyrenew-hew

            echo "----------------------------------------------------------------------------"
            echo "Downloading STF azureconfig.sh for Azure Batch and azuretools compatibility."
            echo "----------------------------------------------------------------------------"
            az storage blob download \
              --account-name "cfaazurebatchprd" \
              --container-name "pyrenew-hew-config" \
              --name "azureconfig.sh" \
              --file "./azureconfig.sh" \
              --auth-mode login \
              --overwrite

            echo "-------------------------------------------------"
            echo "Setting environment variables from azureconfig.sh"
            echo "-------------------------------------------------"
            # cat ./azureconfig.sh >> $GITHUB_ENV
            source ./azureconfig.sh

            # Run timeseries-e
            echo "------------------------------------------"
            echo "Submitting timeseries e job to Azure Batch"
            echo "------------------------------------------"
            FORECAST_DATE=$(TZ="America/New_York" date +%Y-%m-%d)
            uv run python pipelines/batch/setup_job.py \
              --model-family timeseries \
              --output-subdir "${FORECAST_DATE}_forecasts_${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}" \
              --model-letters "e" \
              --job-id "pyrenew-e-${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}_${FORECAST_DATE}_t" \
              --pool-id pyrenew-pool \
              --test True \
              --dry-run True

  run-pyrenew-e:
    needs:
      - set-model-run-environment
      - generate-oidc-token
      - check-available-data
      - run-timeseries-e

    # TODO: configure this check
    # if: ${{ needs.check-available-data.outputs.nssp_latest_comprehensive_check == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Announce deployment environment
        run: echo "Deploying to ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}"
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      - name: Submit pyrenew-e Job
        id: submit-pyrenew-e
        # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
        uses: CDCgov/cfa-actions/runner-action@v1.4.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            echo "------------------------------------------------------------"
            echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"
            echo "------------------------------------------------------------"
            az login --service-principal \
                     --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                     --tenant ${{ secrets.AZURE_TENANT_ID }} \
                     --federated-token ${{ needs.generate-oidc-token.outputs.oidc_token }} \
                     --output none

            CURRENT_BRANCH="${{ needs.set-model-run-environment.outputs.BRANCH_NAME }}"
            echo "--------------------------------------------------------------"
            echo "Cloning repo at branch '$CURRENT_BRANCH', and switching to it."
            echo "--------------------------------------------------------------"
            git clone -b "$CURRENT_BRANCH" https://github.com/${{ github.repository }}.git
            cd pyrenew-hew

            echo "----------------------------------------------------------------------------"
            echo "Downloading STF azureconfig.sh for Azure Batch and azuretools compatibility."
            echo "----------------------------------------------------------------------------"
            az storage blob download \
              --account-name "cfaazurebatchprd" \
              --container-name "pyrenew-hew-config" \
              --name "azureconfig.sh" \
              --file "./azureconfig.sh" \
              --auth-mode login \
              --overwrite

            echo "-------------------------------------------------"
            echo "Setting environment variables from azureconfig.sh"
            echo "-------------------------------------------------"
            # cat ./azureconfig.sh >> $GITHUB_ENV
            source ./azureconfig.sh

            # Run pyrenew-e
            echo "------------------------------------------"
            echo "Submitting pyrenew-e job to Azure Batch"
            echo "------------------------------------------"
            FORECAST_DATE=$(TZ="America/New_York" date +%Y-%m-%d)
            uv run python pipelines/batch/setup_job.py \
              --model-family pyrenew \
              --output-subdir "${FORECAST_DATE}_forecasts" \
              --model-letters "e" \
              --job-id "pyrenew-e-${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}_${FORECAST_DATE}" \
              --pool-id pyrenew-pool \
              --test True \
              --dry-run True

  run-pyrenew-hw-matrix:
      needs:
        - set-model-run-environment
        - generate-oidc-token
        - check-available-data

      # TODO: configure this check
      # if: ${{ needs.check-available-data.outputs.nhsn_data_check == 'true' }}
      runs-on: ubuntu-latest
      environment: ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}
      permissions:
        contents: read
        id-token: write
      strategy:
        matrix:
          model: ['h','hw']

      steps:
        - name: Announce deployment environment
          run: echo "Deploying to ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}"
        - name: Checkout Repo
          id: checkout_repo
          uses: actions/checkout@v4

        - name: Submit pyrenew-h* job
          id: submit-timeseries-h
          # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
          uses: CDCgov/cfa-actions/runner-action@v1.4.0
          with:
            github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
            github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
            wait_for_completion: true
            print_logs: true
            script: |
              echo "Logging into Azure CLI"
              echo "------------------------------------------------------------"
              echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"
              echo "------------------------------------------------------------"
              az login --service-principal \
                      --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                      --tenant ${{ secrets.AZURE_TENANT_ID }} \
                      --federated-token ${{ needs.generate-oidc-token.outputs.oidc_token }} \
                      --output none

              CURRENT_BRANCH="${{ needs.set-model-run-environment.outputs.BRANCH_NAME }}"
              echo "--------------------------------------------------------------"
              echo "Cloning repo at branch '$CURRENT_BRANCH', and switching to it."
              echo "--------------------------------------------------------------"
              git clone -b "$CURRENT_BRANCH" https://github.com/${{ github.repository }}.git
              cd pyrenew-hew

              echo "----------------------------------------------------------------------------"
              echo "Downloading STF azureconfig.sh for Azure Batch and azuretools compatibility."
              echo "----------------------------------------------------------------------------"
              az storage blob download \
                --account-name "cfaazurebatchprd" \
                --container-name "pyrenew-hew-config" \
                --name "azureconfig.sh" \
                --file "./azureconfig.sh" \
                --auth-mode login \
                --overwrite

              echo "-------------------------------------------------"
              echo "Setting environment variables from azureconfig.sh"
              echo "-------------------------------------------------"
              # cat ./azureconfig.sh >> $GITHUB_ENV
              source ./azureconfig.sh

              # Run pyrenew-h
              echo "------------------------------------------"
              echo "Submitting pyrenew-${{ matrix.model }} job to Azure Batch"
              echo "------------------------------------------"
              FORECAST_DATE=$(TZ="America/New_York" date +%Y-%m-%d)
              uv run python pipelines/batch/setup_job.py \
                --model-family pyrenew \
                --output-subdir "${FORECAST_DATE}_forecasts" \
                --model-letters "${{ matrix.model }}" \
                --job-id "pyrenew-${{ matrix.model }}-${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}_${FORECAST_DATE}" \
                --pool-id pyrenew-pool \
                --test True \
                --dry-run True


  run-pyrenew-hew-matrix:
      needs:
        - set-model-run-environment
        - generate-oidc-token
        - check-available-data
        - run-timeseries-e

      # TODO: configure this check
      # if: ${{ needs.check-available-data.outputs.nhsn_data_check == 'true' }}
      runs-on: ubuntu-latest
      environment: ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}
      permissions:
        contents: read
        id-token: write
      strategy:
        matrix:
          model: ['he','hew']

      steps:
        - name: Announce deployment environment
          run: echo "Deploying to ${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}"
        - name: Checkout Repo
          id: checkout_repo
          uses: actions/checkout@v4

        - name: Submit pyrenew-h* job
          id: submit-pyrenew-h
          # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
          uses: CDCgov/cfa-actions/runner-action@v1.4.0
          with:
            github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
            github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
            wait_for_completion: true
            print_logs: true
            script: |
              echo "Logging into Azure CLI"
              echo "------------------------------------------------------------"
              echo "The federated token is ${{ needs.generate-oidc-token.outputs.oidc_token }}"
              echo "------------------------------------------------------------"
              az login --service-principal \
                      --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                      --tenant ${{ secrets.AZURE_TENANT_ID }} \
                      --federated-token ${{ needs.generate-oidc-token.outputs.oidc_token }} \
                      --output none

              CURRENT_BRANCH="${{ needs.set-model-run-environment.outputs.BRANCH_NAME }}"
              echo "--------------------------------------------------------------"
              echo "Cloning repo at branch '$CURRENT_BRANCH', and switching to it."
              echo "--------------------------------------------------------------"
              git clone -b "$CURRENT_BRANCH" https://github.com/${{ github.repository }}.git
              cd pyrenew-hew

              echo "----------------------------------------------------------------------------"
              echo "Downloading STF azureconfig.sh for Azure Batch and azuretools compatibility."
              echo "----------------------------------------------------------------------------"
              az storage blob download \
                --account-name "cfaazurebatchprd" \
                --container-name "pyrenew-hew-config" \
                --name "azureconfig.sh" \
                --file "./azureconfig.sh" \
                --auth-mode login \
                --overwrite

              echo "-------------------------------------------------"
              echo "Setting environment variables from azureconfig.sh"
              echo "-------------------------------------------------"
              # cat ./azureconfig.sh >> $GITHUB_ENV
              source ./azureconfig.sh

              # Run pyrenew-e
              echo "------------------------------------------"
              echo "Submitting pyrenew-h* job to Azure Batch"
              echo "------------------------------------------"
              FORECAST_DATE=$(TZ="America/New_York" date +%Y-%m-%d)
              uv run python pipelines/batch/setup_job.py \
                --model-family pyrenew \
                --output-subdir "${FORECAST_DATE}_forecasts" \
                --model-letters "${{ matrix.model }}" \
                --job-id "pyrenew-${{ matrix.model }}-${{ needs.set-model-run-environment.outputs.ENVIRONMENT_NAME }}_${FORECAST_DATE}" \
                --pool-id pyrenew-pool \
                --test True \
                --dry-run True
