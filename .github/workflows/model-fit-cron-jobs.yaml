name: Submit model fit jobs to Azure Batch via cron

on:
  workflow_dispatch:
  schedule:
    - cron: "0,30 9-20 * * WED"  # Every Wednesday, every 30 minutes from 9 AM to 8 PM UTC
  push:
    branches:
      - 'jk*' # For testing purposes; matches any branch starting with 'jk'
    paths:
      - '.github/workflows/model-fit-cron-jobs.yaml'

jobs:

  set-environment:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT_NAME: ${{ steps.set-env-step.outputs.ENVIRONMENT_NAME }}
    steps:
      - id: set-env-step
        run: |
          # or whatever logic you want to determine environment,
          # you could do 'ENVIRONMENT_NAME=${GITHUB_REF_NAME} >> $GITHUB_OUTPUT' for simplicity
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT_NAME=test" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT_NAME=test" >> $GITHUB_ENV
          fi

  # TODO: Split into separate jobs for each model, and one for the oidc token

  # generate-oidc-token:
  #   runs-on: ubuntu-latest
  #   environment: |-
  #     ${{github.ref_name == 'main'               && 'production'
  #                                                || 'test'      }}
  #   permissions:
  #     contents: read
  #     id-token: write

  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: npm install @actions/core@1.6.0 @actions/http-client
  #     - uses: actions/github-script@v7
  #       id: idtoken
  #       with:
  #         script: |
  #           const coredemo = require('@actions/core')
  #           const id_token = await coredemo.getIDToken('api://AzureADTokenExchange')
  #           coredemo.setOutput('id_token', id_token)

  # check-available-data:
  #   runs-on: ubuntu-latest
  #   needs: generate-oidc-token
  #   environment: |-
  #     ${{github.ref_name == 'main'               && 'production'
  #                                                || 'test'      }}
  #   permissions:
  #     contents: read
  #     id-token: write

  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: npm install @actions/core@1.6.0 @actions/http-client
  #     - name: Check for Available Data
  #       id: check-available-data-step
  #       uses: CDCgov/cfa-actions/runner-action@v1.4.0
  #       with:
  #         github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
  #         github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
  #         wait_for_completion: true
  #         print_logs: true
  #         script: |
  #           echo "Logging into Azure CLI"
  #           echo "------------------------------------------------------------"
  #           echo "The federated token is ${{ steps.idtoken.outputs.id_token }}"
  #           echo "------------------------------------------------------------"
  #           az login --service-principal \
  #                    --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
  #                    --tenant ${{ secrets.AZURE_TENANT_ID }} \
  #                    --federated-token ${{ steps.idtoken.outputs.id_token }} \
  #                    --output none

  #           # TODO: actually check the latest comprehensive parquet, not the pyrenew-hew config
  #           echo "Checking for Latest Comprehensive NSSP Data"
  #           nssp_latest_comprehensive_last_modified=$(
  #             az storage blob show \
  #             --account-name "cfaazurebatchprd" \
  #             --container-name "nssp-etl" \
  #             --name "latest_comprehensive.parquet" \
  #             --query "properties.lastModified" \
  #             --auth-mode login \
  #             --output tsv
  #           )
  #           echo 'nssp_latest_comprehensive_check' >> $GITHUB_OUTPUT

  #           echo "Checking for NWSS ETL Data"
  #           echo 'nwss_data_check' >> $GITHUB_OUTPUT

  #           echo "Checking for NHSN Data"
  #           echo 'nhsn_data_check' >> $GITHUB_OUTPUT

  #           echo "Checking for timeseries-e Data"
  #           echo 'timeseries_e_data_check' >> $GITHUB_OUTPUT

  #           echo "-----------------------------------------"
  #           echo "Latest comprehensive last modified date:"
  #           echo $nssp_latest_comprehensive_last_modified
  #           echo "-----------------------------------------"



  run-timeseries-e:
    # needs: [ generate-oidc-token, check-available-data, set-environment ]
    needs: set-environment
    # if: ${{ needs.check-available-data.steps.outputs.nssp_latest_comprehensive_check == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Announce deployment environment
        run: echo "Deploying to ${{ needs.set-environment.outputs.ENVIRONMENT_NAME }}"
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      # From: https://stackoverflow.com/a/58035262/2097171
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: get-branch

      # From: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers#requesting-the-jwt-using-the-actions-core-toolkit
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v7
        id: idtoken
        with:
          script: |
            const coredemo = require('@actions/core')
            const id_token = await coredemo.getIDToken('api://AzureADTokenExchange')
            coredemo.setOutput('id_token', id_token)

      - name: Check for Dataset Availability
        id: check-dataset-availability
        # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
        uses: CDCgov/cfa-actions/runner-action@v1.4.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            echo "------------------------------------------------------------"
            echo "The federated token is ${{ steps.idtoken.outputs.id_token }}"
            echo "------------------------------------------------------------"
            az login --service-principal \
                     --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                     --tenant ${{ secrets.AZURE_TENANT_ID }} \
                     --federated-token ${{ steps.idtoken.outputs.id_token }} \
                     --output none

            # nssp
            # nssp_latest_comprehensive_last_modified=$(
            #   az storage blob show \
            #   --account-name "cfaazurebatchprd" \
            #   --container-name "nssp-etl" \
            #   --name "latest_comprehensive.parquet" \
            #   --query "properties.lastModified" \
            #   --auth-mode login \
            #   --output tsv
            # )

            # timeseries-e
            # TODO: check test output too, if the flag is set
            # timseries_e_output=$(
            #   az storage blob show \
            #   --account-name "cfaazurebatchprd" \
            #   --container-name "pyrenew-hew-prod-output" \
            #   --name "" \
            #   --query "properties.lastModified" \
            #   --auth-mode login \
            #   --output tsv
            # )


            # nwss
            # nwss_gold_last_modified=$(
            #   az storage blob show \
            #   --account-name "cfaazurebatchprd" \
            #   --container-name "nssp-etl" \
            #   --name "latest_comprehensive.parquet" \
            #   --query "properties.lastModified" \
            #   --auth-mode login \
            #   --output tsv
            # )

            # nhsn
            # TODO: nshn api code

            # echo "-----------------------------------------"
            # echo "Latest comprehensive last modified date:"
            # echo $nssp_latest_comprehensive_last_modified
            # echo "-----------------------------------------"

      - name: Submit timeseries-e Job
        id: submit-timeseries-e
        # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
        uses: CDCgov/cfa-actions/runner-action@v1.4.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            echo "------------------------------------------------------------"
            echo "The federated token is ${{ steps.idtoken.outputs.id_token }}"
            echo "------------------------------------------------------------"
            az login --service-principal \
                     --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
                     --tenant ${{ secrets.AZURE_TENANT_ID }} \
                     --federated-token ${{ steps.idtoken.outputs.id_token }} \
                     --output none

            CURRENT_BRANCH="${{ steps.get-branch.outputs.branch }}"
            echo "--------------------------------------------------------------"
            echo "Cloning repo at branch '$CURRENT_BRANCH', and switching to it."
            echo "--------------------------------------------------------------"
            git clone -b "$CURRENT_BRANCH" https://github.com/${{ github.repository }}.git
            cd pyrenew-hew

            echo "----------------------------------------------------------------------------"
            echo "Downloading STF azureconfig.sh for Azure Batch and azuretools compatibility."
            echo "----------------------------------------------------------------------------"
            az storage blob download \
              --account-name "cfaazurebatchprd" \
              --container-name "pyrenew-hew-config" \
              --name "azureconfig.sh" \
              --file "./azureconfig.sh" \
              --auth-mode login \
              --overwrite

            echo "-------------------------------------------------"
            echo "Setting environment variables from azureconfig.sh"
            echo "-------------------------------------------------"
            # cat ./azureconfig.sh >> $GITHUB_ENV
            source ./azureconfig.sh

            # Run timeseries-e
            echo "------------------------------------------"
            echo "Submitting timeseries e job to Azure Batch"
            echo "------------------------------------------"
            FORECAST_DATE=$(date +%Y-%m-%d)
            uv run python pipelines/batch/setup_job.py \
              --model-family timeseries \
              --output-subdir "${FORECAST_DATE}_forecasts" \
              --model-letters "e" \
              --job-id "pyrenew-e-${{ env.ENVIRONMENT_NAME }}_${FORECAST_DATE}_t" \
              --pool-id pyrenew-pool \
              --test True \
              --dry-run True


  # run-pyrenew-e:

  #   runs-on: ubuntu-latest
  #   # TODO: change test environment startswith pattern
  #   environment: |-
  #     ${{github.ref_name == 'main'               && 'production'
  #                                                || 'test'      }}
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Submit Pyrenew-e Job
  #       id: create_batch_pool
  #       # Removed invalid condition referencing steps.check_pool_id.outputs.pool-exists
  #       uses: CDCgov/cfa-actions/runner-action@v1.4.0
  #       with:
  #         github_app_id: ${{ secrets.CDCENT_ACTOR_APP_ID }}
  #         github_app_pem: ${{ secrets.CDCENT_ACTOR_APP_PEM }}
  #         wait_for_completion: true
  #         print_logs: true
  #         script: |
  #           echo "Logging into Azure CLI"
  #             az login --service-principal \
  #             --username ${{ secrets.AZURE_STFT_SP_CLIENT_ID }} \
  #             --tenant ${{ secrets.AZURE_TENANT_ID }} \
  #             --federated-token ${{ steps.idtoken.outputs.id_token }} \
  #             --output none

  #           echo "Setting env vars for Azure Batch and azuretools compatibility."
  #             az storage blob download \
  #             --account-name "cfaazurebatchprd" \
  #             --container-name "pyrenew-hew-config" \
  #             --name "azureconfig.sh" \
  #             --file "./azureconfig.sh" \
  #             --auth-mode login \
  #             --overwrite

  #           # Sourcing the azure config
  #           source ./azureconfig.sh # TODO: Eventually we want to move away from needing this at all.

  #           FORECAST_DATE=$(date +%Y-%m-%d)

  #           # Run pyrenew-e
  #           uv run python pipelines/batch/setup_job.py \
  #             --model-family pyrenew \
  #             --output-subdir "${FORECAST_DATE}_forecasts" \
  #             --model-letters "e" \
  #             --job-id "pyrenew-e-prod_${FORECAST_DATE}" \
  #             --pool-id pyrenew-pool \
  #             --dry-run True
