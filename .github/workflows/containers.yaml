name: Create Docker Image

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: pyrenew-hew

jobs:
    build-pipeline-image:
      runs-on: ubuntu-latest
      name: Build image
      outputs:
        tag: ${{ steps.image-tag.outputs.tag }}
      steps:

        - name: Checkout code
          uses: actions/checkout@v4

        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: branch-name

        - name: Figure out tag (either latest if it is main or the branch name)
          shell: bash
          id: image-tag
          run: |
            if [ "${{ steps.branch-name.outputs.branch }}" = "main" ]; then
              echo "tag=latest" >> $GITHUB_OUTPUT
            else
              echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
            fi

        - name: Docker Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker build and push
          run: |
            chmod +x $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh
            $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh ${{ env.IMAGE_NAME }} ${{ steps.image-tag.outputs.tag }}

    acr-import:
      permissions:
        contents: read
        id-token: write
        packages: read
      environment: production
      needs: build-pipeline-image
      name: Import image from GHCR
      runs-on: ubuntu-latest
      steps:

      # From: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers#requesting-the-jwt-using-the-actions-core-toolkit
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
      - name: Get Id Token
        uses: actions/github-script@v7
        id: idtoken
        with:
          script: |
            const coredemo = require('@actions/core')
            const id_token = await coredemo.getIDToken('api://AzureADTokenExchange')
            coredemo.setOutput('id_token', id_token)

      - name: ACR Import
        uses: CDCgov/cfa-actions/runner-action@v1.3.0
        with:
          github_app_id: ${{ secrets.REPO_CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.REPO_CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ needs.build-pipeline-image.outputs.tag }}

            echo "Logging into Azure CLI"
            az login --service-principal \
            --username ${{ fromJSON(secrets.EDAV_STF_SERVICE_PRINCIPAL).clientId }} \
            --tenant ${{ fromJSON(secrets.EDAV_STF_SERVICE_PRINCIPAL).tenantId }} \
            --federated-token ${{ steps.idtoken.outputs.id_token }} \
            --output none

            echo "Running acr import"
            az acr import --name ${{ vars.CONTAINER_REGISTRY_NAME }} \
              --source "ghcr.io/cdcgov/$IMAGE_TAG" \
              --username '${{ github.repository_owner }}'\
              --password ${{ secrets.GITHUB_TOKEN }} \
              --image "$IMAGE_TAG" \
              --force && echo 'Copied image!'

            if [ $? -ne 0 ]; then
              echo "Failed to copy image"
            fi
