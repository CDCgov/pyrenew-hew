name: Create Docker Image

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: pyrenew-hew

jobs:
    build-pipeline-image:
      runs-on: ubuntu-latest
      name: Build image
      outputs:
        tag: ${{ steps.image-tag.outputs.tag }}
      steps:

        - name: Checkout code
          uses: actions/checkout@v4

        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: branch-name

        - name: Figure out tag (either latest if it is main or the branch name)
          shell: bash
          id: image-tag
          run: |
            if [ "${{ steps.branch-name.outputs.branch }}" = "${{ inputs.main-branch-name }}" ]; then
              echo "tag=${{ inputs.main-branch-tag }}" >> $GITHUB_OUTPUT
            else
              echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
            fi

        - name: Docker Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker build and push
          run: |
            chmod +x $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh
            $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh ${{ env.IMAGE_NAME }} ${{ steps.image-tag.outputs.tag }}

    acr-import:
      needs: build-pipeline-image
      name: Import image from GHCR
      runs-on: ubuntu-latest
      steps:
      - name: ACR Import
        uses: CDCgov/cfa-actions/runner-action@v1.3.0
        with:
          github_app_id: 1168715
          github_app_pem: |
            -----BEGIN RSA PRIVATE KEY----- 
            MIIEpQIBAAKCAQEA1cYKEbbtogtXdXi9bp2M+ztpG4eiG/B3DSyprw7KfYgajvWe 
            2+TwMiQeeAdSMW3dPtbOMH5rf8uACONHmi3fTr+xfYXBqplP+uufr8rGgkCCW587 
            qew/t3R3iLEAdVaih1pSuPy9kLwNpnPFkBVIFl4PPahEFpOubLnwR7eP2OsKxNQj 
            zkxxLuFKAPA+WDbtn4v8tixlzLol7ByjlGpJzbkTSLgVPrJH3h3GFx1BMbnst1sv 
            WgO/zg8CkDGU5WJO0kGhSZgOJal/46lMA41uKEC14N7alE2NKDjOjZ1nohkI7W/W 
            ezypgdjlnzJEZ9cRAcPAZDMwOdK/59wjM0FS1QIDAQABAoIBAQDU0jUiD6iiQ4JN 
            i+ejYSyCzVHFu5EzGYGcVxOTGTmUIdS28Ga36kMK2BSRUFCOrx6tObLKaoFhF9qe 
            fo7BOtvvDT6JhYkZ60nJt5whqdFYyRo+VtdSQsXoQQXjyrt3Fcn20IA8dDnRBrbc 
            OLO9zsIWqounyYYHp/zld3N0IpYNz5d2tuW8e8pdxdC++8cV1Unh60BMFdzTh25E 
            9j+STXNWLwYomHM4NNHwBqJFpUH7gb/bdN9G8pYwrKFkoa5CiEQh2G5/DDQ/WFaA 
            +s47n11menqoR2Fiyn4DcbosCyoT9zasCpq4lpRk8VDq7kfMMf/cPUdfrhnctTSs 
            HzYGAtH9AoGBAPVJwwBWoPEO2WO1w8Aua28B+4oMiNsnOE2TaEDcIDq1kEj6cQay 
            4UqIrAsSoe1FZNXx6bMvHJZbxhKfxbIYjrBq8AFHGS8KPgj5UP74gUuvEDyl27yn 
            CZ7tv/IzBilPrayNkfLI7WIRJuTJtzkElICLZU1sVEYu3eOM7q8qKsAfAoGBAN8b 
            9Kml0G1AAxJJYe7XRE87ftZttUHfZGMP/jccKpGo8QGNdURCN0l5Jb5X+7c8dXAt 
            3nVOSIP47SqNybGKntW9G5Q7oR29EJ/Oglmg7Ofz0v7WIGaMpTkEjNNurb3GKqQr 
            OMU9fzHst0T1rHDPElGQoipUV42iGprhLCsuDL6LAoGAAbIJ1AXFRQVKQWMvQDPR 
            8El+OJ0PkRw7SmX7cX9UBbPdlHOOtnIkFoTNU6JEVkSFhukOKXvo4a0uuFA8aJe8 
            3MFQeWHJbcbPWPaINcr38dL69MBcvXgWG/AexIjPwRdY5vlvidMTuPrPXwN57b33 
            XNAZ2igmiPmn9PuzZqiO9RcCgYEAx/aUWCCHKAPBPPiMT7acQK9ARQta80k2/hpt 
            bBNQi/Bw4UVZnu4CA1YTYAAXWOlVEE/sHBMnpzDJz+P4q6lkJokxWLAA/Vhgt/os 
            lgxHiLTdnQ1pSMAxrWLInQ+LpJUhzrX2UcGGaMaSk7nk7c6JypTo4ytotUZetgWu 
            wpypS3UCgYEAq8IG96BQBDwdriHXuebR58LhJDnbeJeAa2lQruDlcHOtswj31zef 
            +RFhclRDauRUjYOQ6+/KV/Kn/g8/j96+IbK2g9WBWYTq8y8dDQtvuXVznDDnZBC9 
            ZPji7l1ecG5pTNX+oQWKbfzFkBkBy83WkxMhLfAmoArTah5q3EZ11rs= 
            -----END RSA PRIVATE KEY-----
          wait_for_completion: true
          print_logs: true
          script: |
            IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ needs.build-pipeline-image.outputs.tag }}

            az login --service-principal \&& 
            --username ${{ fromJSON(secrets.EDAV_STF_SERVICE_PRINCIPAL).clientId }} \
            --password ${{ fromJSON(secrets.EDAV_STF_SERVICE_PRINCIPAL).clientSecret }} \
            --tenant ${{ fromJSON(secrets.EDAV_STF_SERVICE_PRINCIPAL).tenantId }}

            az acr import --name ${{ vars.CONTAINER_REGISTRY_NAME }} \
              --source "ghcr.io/cdcgov/$IMAGE_TAG" \
              --username '${{ github.repository_owner }}'\
              --password ${{ secrets.GITHUB_TOKEN }} \
              --image "$IMAGE_TAG" \
              --force && echo 'Copied image!'

            if [ $? -ne 0 ]; then
              echo "Failed to copy image"
            fi      